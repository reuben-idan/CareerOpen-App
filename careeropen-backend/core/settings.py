"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from decouple import config, Csv
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Use a default for testing if not set in environment
SECRET_KEY = config('SECRET_KEY', default='django-insecure-test-key-1234567890')

# SECURITY WARNING: don't run with debug turned on in production!
# Default to False for production, can be overridden by environment variable
DEBUG = config('DEBUG', default=False, cast=bool)

# Default ALLOWED_HOSTS for development
ALLOWED_HOSTS = ['localhost', '127.0.0.1', 'careeropen-api.onrender.com']

# Allow overriding via environment variable
env_hosts = config('ALLOWED_HOSTS', default='')
if env_hosts:
    ALLOWED_HOSTS.extend(host.strip() for host in env_hosts.split(','))

# CORS settings - Configure CORS before CSRF
CORS_ALLOW_ALL_ORIGINS = True  # For development only, restrict in production
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# CSRF settings
CSRF_TRUSTED_ORIGINS = [
    'http://localhost:8000',
    'http://127.0.0.1:8000',
    'https://careeropen-api.onrender.com',
]
CSRF_COOKIE_HTTPONLY = False  # Allow JavaScript to read the CSRF token
CSRF_USE_SESSIONS = False  # Store CSRF token in cookie, not session
CSRF_COOKIE_SECURE = False  # Set to True in production with HTTPS
CSRF_COOKIE_SAMESITE = 'Lax'  # Lax is sufficient for most cases

# Session settings
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SECURE = False  # Set to True in production with HTTPS
SESSION_COOKIE_SAMESITE = 'Lax'  # Lax is sufficient for most cases

# Security headers
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'

# For API requests, we'll use JWT tokens instead of CSRF
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}


# Custom user model
AUTH_USER_MODEL = 'accounts.User'

# Determine environment
import sys
TESTING = len(sys.argv) > 1 and sys.argv[1] == 'test'
DEPLOY_ENV = os.getenv('DEPLOY_ENV', 'development').lower()

# Import environment-specific settings
if not TESTING:
    if DEPLOY_ENV == 'production':
        try:
            from .prod_settings import *  # noqa
            print(f"Using production settings (DEPLOY_ENV={DEPLOY_ENV})")
        except ImportError as e:
            print(f"Error importing production settings: {e}")
            raise
    elif DEBUG:
        try:
            from .dev_settings import *  # noqa
            print("Using development settings with fakeredis")
        except ImportError as e:
            print(f"Development settings not found, using base settings: {e}")
    else:
        print(f"Using base settings (DEBUG={DEBUG}, DEPLOY_ENV={DEPLOY_ENV})")

# Application definition

INSTALLED_APPS = [
    # Django defaults
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # Third-party apps
    'rest_framework',
    'rest_framework_simplejwt',
    'corsheaders',
    'drf_spectacular',
    'drf_spectacular_sidecar',  # Required for production static files
    
    # Local apps
    'accounts.apps.AccountsConfig',
    'jobs.apps.JobsConfig',
    'network.apps.NetworkConfig',
]

# DRF Spectacular Settings
SPECTACULAR_SETTINGS = {
    'TITLE': 'CareerOpen API',
    'DESCRIPTION': 'API documentation for CareerOpen application',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'SWAGGER_UI_DIST': 'SIDECAR',  # Use the sidecar for production
    'SWAGGER_UI_FAVICON_HREF': 'SIDECAR',
    'REDOC_DIST': 'SIDECAR',
    'COMPONENT_SPLIT_REQUEST': True,  # Important for file uploads
    
    # Disable example processing to avoid 'request_only' errors
    'SCHEMA_PATH_PREFIX': r'/api/v[0-9]',
    'SCHEMA_PATH_PREFIX_TRIM': True,
    'SWAGGER_UI_SETTINGS': {
        'deepLinking': True,
        'persistAuthorization': True,
        'displayRequestDuration': True,
    },
    'PREPROCESSING_HOOKS': [
        'core.schema.preprocess_example_responses',
    ],
    # Disable example processing
    'COMPONENT_NO_READ_ONLY_REQUIRED': True,
    'ENUM_NAME_OVERRIDES': {},
    'GENERIC_ADDITIONAL_PROPERTIES': 'dict',
    'ENUM_ADD_EXPLICIT_BLANK_NULL_CHOICE': False,
    'SCHEMA_COERCE_PATH_PK_SUFFIX': True,
    'SCHEMA_COERCE_PATH_PK': True,
    'DEFAULT_GENERATOR_CLASS': 'core.schema.CustomSchemaGenerator',
}

MIDDLEWARE = [
    # Temporarily disabled Prometheus middleware to resolve async/coroutine issues
    # 'django_prometheus.middleware.PrometheusBeforeMiddleware',  # Prometheus metrics
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # For static files
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # Custom CSRF exemption middleware - must come before CsrfViewMiddleware
    'core.middleware.csrf_exempt.CsrfExemptMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    # Temporarily disable XFrameOptionsMiddleware to test if it's causing the coroutine issue
    # 'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'core.middleware.request_logger.RequestIdMiddleware',
    # Temporarily disable RequestResponseLoggingMiddleware to isolate the issue
    # 'core.middleware.request_logger.RequestResponseLoggingMiddleware',
    # Temporarily disabled Prometheus middleware to resolve async/coroutine issues
    # 'django_prometheus.middleware.PrometheusAfterMiddleware',  # Prometheus metrics
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Database configuration will be set in environment-specific settings
# Default to SQLite if not overridden
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
    ],
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.OrderingFilter',
        'rest_framework.filters.SearchFilter',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

# DRF Spectacular Settings - Consolidated and optimized
SPECTACULAR_SETTINGS = {
    'TITLE': 'CareerOpen API',
    'DESCRIPTION': 'API documentation for CareerOpen application',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'SWAGGER_UI_DIST': 'SIDECAR',  # Use the sidecar for production
    'SWAGGER_UI_FAVICON_HREF': 'SIDECAR',
    'REDOC_DIST': 'SIDECAR',
    
    # Schema generation settings
    'DEFAULT_SCHEMA_CLASS': 'core.schema.CustomAutoSchema',
    'DEFAULT_GENERATOR_CLASS': 'core.schema.CustomSchemaGenerator',
    'SCHEMA_PATH_PREFIX': r'/api/v[0-9]',
    'SCHEMA_PATH_PREFIX_TRIM': True,
    
    # Disable example processing to avoid 'request_only' errors
    'COMPONENT_SPLIT_REQUEST': False,
    'COMPONENT_SPLIT_RESPONSE': False,
    'COMPONENT_NO_READ_ONLY_REQUIRED': True,
    'ENUM_ADD_EXPLICIT_BLANK_NULL_CHOICE': False,
    'SCHEMA_COERCE_PATH_PK_SUFFIX': True,
    'SCHEMA_COERCE_PATH_PK': True,
    
    # Server and security settings
    'SERVERS': [
        {'url': 'https://careeropen-api.onrender.com', 'description': 'Production server'},
        {'url': 'http://localhost:8000', 'description': 'Local development server'},
    ],
    'SECURITY': [],  # Disable security schemes to simplify the schema
    
    # UI settings
    'SWAGGER_UI_SETTINGS': {
        'deepLinking': True,
        'persistAuthorization': True,
        'displayRequestDuration': True,
        'filter': True,
        'docExpansion': 'none',
    },
    
    # Disable example processing
    'PREPROCESSING_HOOKS': [
        'core.schema.preprocess_example_responses',
    ],
    
    # Error handling
    'EXCEPTION_HANDLER': 'core.middleware.error_handler.api_exception_handler',
    'TEST_REQUEST_DEFAULT_FORMAT': 'json',
    
    # Throttling (if needed)
    'DEFAULT_THROTTLE_RATES': {
        'anon': '100/day',
        'user': '1000/day',
    },
    
    # Enum overrides
    'ENUM_NAME_OVERRIDES': {
        'StatusEnum': 'jobs.models.JobPosting.Status',
        'JobTypeEnum': 'jobs.models.JobPosting.JobType',
        'ExperienceLevelEnum': 'jobs.models.JobPosting.ExperienceLevel',
    },
}

# JWT Settings
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'AUTH_HEADER_TYPES': ('Bearer',),
    'SIGNING_KEY': config('JWT_SECRET_KEY', default='django-insecure-jwt-key-1234567890'),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'JTI_CLAIM': 'jti',
    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}

# CORS settings
CORS_ALLOW_ALL_ORIGINS = config('CORS_ALLOW_ALL_ORIGINS', default=True, cast=bool)
CORS_ALLOWED_ORIGINS = config('CORS_ALLOWED_ORIGINS', cast=Csv(), 
    default='http://localhost:3000,http://127.0.0.1:3000,http://localhost:5173,http://127.0.0.1:5173')
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]
CORS_EXPOSE_HEADERS = [
    'content-type',
    'x-csrftoken',
]

# CSRF settings
CSRF_TRUSTED_ORIGINS = CORS_ALLOWED_ORIGINS
CSRF_COOKIE_SECURE = config('CSRF_COOKIE_SECURE', default=False, cast=bool)
CSRF_COOKIE_HTTPONLY = True
CSRF_USE_SESSIONS = False

# Session settings
SESSION_COOKIE_SECURE = config('SESSION_COOKIE_SECURE', default=False, cast=bool)
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Lax'  # or 'None' if using HTTPS

# Cache settings
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://127.0.0.1:6379/1',  # Use database 1 for default cache
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'PASSWORD': '',  # Add Redis password if required
            'SOCKET_CONNECT_TIMEOUT': 5,  # seconds
            'SOCKET_TIMEOUT': 5,  # seconds
            'IGNORE_EXCEPTIONS': True,  # Prevents Redis errors from crashing the app
        },
        'KEY_PREFIX': 'careeropen',  # Cache key prefix
    },
    'sessions': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://127.0.0.1:6379/2',  # Use database 2 for sessions
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        },
        'KEY_PREFIX': 'careeropen_sessions',
    },
}

# Session engine - using Redis for session storage
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'sessions'

# Cache time to live is 15 minutes by default
CACHE_TTL = 60 * 15

# Import enhanced logging configuration
from .temp_logging_enhanced import LOGGING

# Logging Configuration - Enhanced for debugging
# LOGGING is now imported from temp_logging.py
