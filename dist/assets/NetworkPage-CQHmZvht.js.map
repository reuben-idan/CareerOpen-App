{"version":3,"file":"NetworkPage-CQHmZvht.js","sources":["../../node_modules/@heroicons/react/24/outline/esm/UserMinusIcon.js","../../src/stores/networkStore.js","../../src/services/api/networkService.js","../../src/pages/network/NetworkPage.jsx"],"sourcesContent":["import * as React from \"react\";\nfunction UserMinusIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M22 10.5h-6m-2.25-4.125a3.375 3.375 0 1 1-6.75 0 3.375 3.375 0 0 1 6.75 0ZM4 19.235v-.11a6.375 6.375 0 0 1 12.75 0v.109A12.318 12.318 0 0 1 10.374 21c-2.331 0-4.512-.645-6.374-1.766Z\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(UserMinusIcon);\nexport default ForwardRef;","import { create } from 'zustand';\nimport { \n  fetchNetworkData, \n  sendConnectionRequest, \n  acceptConnectionRequest, \n  declineConnectionRequest, \n  removeConnection, \n  searchUsers \n} from '../services/api/networkService';\n\n// Helper function to parse pagination from response headers\nconst parsePagination = (headers) => {\n  const pagination = {\n    count: 0,\n    next: null,\n    previous: null,\n    totalPages: 1,\n    currentPage: 1,\n  };\n\n  try {\n    if (headers['x-pagination']) {\n      const paginationData = JSON.parse(headers['x-pagination']);\n      return {\n        count: paginationData.count || 0,\n        next: paginationData.next || null,\n        previous: paginationData.previous || null,\n        totalPages: paginationData.total_pages || 1,\n        currentPage: paginationData.current_page || 1,\n      };\n    }\n  } catch (error) {\n    console.error('Error parsing pagination:', error);\n  }\n\n  return pagination;\n};\n\nconst useNetworkStore = create((set, get) => ({\n  // Network data state\n  connections: [],\n  pendingRequests: [],\n  suggestions: [],\n  searchResults: [],\n  isLoading: false,\n  isSearching: false,\n  error: null,\n  \n  // Pagination state\n  pagination: {\n    count: 0,\n    next: null,\n    previous: null,\n    totalPages: 1,\n    currentPage: 1,\n  },\n  \n  // Getters\n  get currentPage() {\n    return get().pagination.currentPage;\n  },\n  \n  get totalPages() {\n    return get().pagination.totalPages;\n  },\n  \n  get totalCount() {\n    return get().pagination.count;\n  },\n  \n  /**\n   * Fetches network data including connections and pending requests\n   * @param {Object} [filters] - Optional filters for the network data\n   */\n  fetchNetworkData: async (filters = {}) => {\n    set({ isLoading: true, error: null });\n    \n    try {\n      const response = await fetchNetworkData(filters);\n      const pagination = parsePagination(response.headers);\n      \n      // The API should return an object with connections, pending_requests, and suggestions\n      const { connections = [], pending_requests = [], suggestions = [] } = response.data;\n      \n      set({ \n        connections,\n        pendingRequests: pending_requests,\n        suggestions,\n        pagination: {\n          ...pagination,\n          count: response.data.count || connections.length,\n          totalPages: Math.ceil((response.data.count || connections.length) / (filters.page_size || 10)),\n          currentPage: parseInt(filters.page || 1, 10),\n        },\n        isLoading: false \n      });\n      \n      return response.data;\n    } catch (error) {\n      const errorMessage = error.message || 'Failed to fetch network data';\n      set({ error: errorMessage, isLoading: false });\n      throw error;\n    }\n  },\n  \n  /**\n   * Searches for users to connect with\n   * @param {string} query - The search query\n   * @param {Object} [params] - Additional search parameters\n   */\n  searchUsers: async (query, params = {}) => {\n    if (!query) {\n      set({ searchResults: [], isSearching: false });\n      return [];\n    }\n    \n    set({ isSearching: true, error: null });\n    \n    try {\n      const results = await searchUsers(query, params);\n      set({ searchResults: results, isSearching: false });\n      return results;\n    } catch (error) {\n      const errorMessage = error.message || 'Failed to search users';\n      set({ error: errorMessage, isSearching: false, searchResults: [] });\n      throw error;\n    }\n  },\n  \n  /**\n   * Sends a connection request to another user\n   * @param {string|number} userId - The ID of the user to connect with\n   */\n  sendConnectionRequest: async (userId) => {\n    set({ isLoading: true, error: null });\n    \n    try {\n      const result = await sendConnectionRequest(userId);\n      \n      // Update the suggestions list by removing the user we just sent a request to\n      set(state => ({\n        suggestions: state.suggestions.filter(user => user.id !== userId),\n        isLoading: false\n      }));\n      \n      return result;\n    } catch (error) {\n      const errorMessage = error.message || 'Failed to send connection request';\n      set({ error: errorMessage, isLoading: false });\n      throw error;\n    }\n  },\n  \n  /**\n   * Accepts a pending connection request\n   * @param {string|number} requestId - The ID of the connection request to accept\n   */\n  acceptConnectionRequest: async (requestId) => {\n    set({ isLoading: true, error: null });\n    \n    try {\n      const result = await acceptConnectionRequest(requestId);\n      \n      // Update the pending requests and connections lists\n      set(state => ({\n        pendingRequests: state.pendingRequests.filter(req => req.id !== requestId),\n        connections: [...state.connections, result],\n        isLoading: false\n      }));\n      \n      return result;\n    } catch (error) {\n      const errorMessage = error.message || 'Failed to accept connection request';\n      set({ error: errorMessage, isLoading: false });\n      throw error;\n    }\n  },\n  \n  /**\n   * Declines a pending connection request\n   * @param {string|number} requestId - The ID of the connection request to decline\n   */\n  declineConnectionRequest: async (requestId) => {\n    set({ isLoading: true, error: null });\n    \n    try {\n      await declineConnectionRequest(requestId);\n      \n      // Update the pending requests list\n      set(state => ({\n        pendingRequests: state.pendingRequests.filter(req => req.id !== requestId),\n        isLoading: false\n      }));\n      \n      return true;\n    } catch (error) {\n      const errorMessage = error.message || 'Failed to decline connection request';\n      set({ error: errorMessage, isLoading: false });\n      throw error;\n    }\n  },\n  \n  /**\n   * Removes a connection\n   * @param {string|number} connectionId - The ID of the connection to remove\n   */\n  removeConnection: async (connectionId) => {\n    set({ isLoading: true, error: null });\n    \n    try {\n      await removeConnection(connectionId);\n      \n      // Update the connections list\n      set(state => ({\n        connections: state.connections.filter(conn => conn.id !== connectionId),\n        isLoading: false\n      }));\n      \n      return true;\n    } catch (error) {\n      const errorMessage = error.message || 'Failed to remove connection';\n      set({ error: errorMessage, isLoading: false });\n      throw error;\n    }\n  },\n  \n  /**\n   * Clears the network store state\n   */\n  clear: () => set({ \n    connections: [],\n    pendingRequests: [],\n    suggestions: [],\n    searchResults: [],\n    error: null,\n    pagination: {\n      count: 0,\n      next: null,\n      previous: null,\n      totalPages: 1,\n      currentPage: 1,\n    },\n  }),\n}));\n\nexport default useNetworkStore;\n","import { apiService } from './apiService';\n\n/**\n * Fetches network data including connections, pending requests, and suggestions\n * @param {Object} [params] - Query parameters for filtering/sorting\n * @param {number} [params.page] - Page number for pagination\n * @param {number} [params.page_size] - Number of items per page\n * @returns {Promise<Object>} A promise that resolves to the network data\n */\nexport const fetchNetworkData = async (params = {}) => {\n  try {\n    // Set default pagination if not provided\n    const page = params.page || 1;\n    const pageSize = params.page_size || 10;\n    \n    // Prepare query parameters\n    const queryParams = {\n      ...params,\n      page,\n      page_size: pageSize,\n    };\n    \n    // Remove undefined or null values\n    Object.keys(queryParams).forEach(key => \n      (queryParams[key] === undefined || queryParams[key] === '') && delete queryParams[key]\n    );\n    \n    const response = await apiService.get('/network/', { \n      params: queryParams,\n      _fullResponse: true // Include full response for pagination headers\n    });\n    \n    // Return both data and headers for pagination\n    return {\n      data: response.data,\n      headers: response.headers,\n      status: response.status\n    };\n  } catch (error) {\n    console.error('Error fetching network data:', error);\n    \n    // Enhanced error handling\n    if (error.response) {\n      const errorMessage = error.response.data?.detail || \n                         error.response.data?.message || \n                         'Failed to fetch network data';\n      const customError = new Error(errorMessage);\n      customError.response = error.response;\n      throw customError;\n    } else if (error.request) {\n      throw new Error('No response received from the server. Please check your network connection.');\n    } else {\n      throw new Error(`Request failed: ${error.message}`);\n    }\n  }\n};\n\n/**\n * Sends a connection request to another user\n * @param {string|number} userId - The ID of the user to connect with\n * @returns {Promise<Object>} A promise that resolves to the connection request data\n */\nexport const sendConnectionRequest = async (userId) => {\n  if (!userId) {\n    throw new Error('User ID is required to send a connection request');\n  }\n  \n  try {\n    const response = await apiService.post('/network/connections/request/', { user_id: userId });\n    return response.data;\n  } catch (error) {\n    console.error('Error sending connection request:', error);\n    \n    if (error.response) {\n      const errorMessage = error.response.data?.detail || \n                         Object.values(error.response.data || {}).flat().join('\\n') ||\n                         'Failed to send connection request';\n      const apiError = new Error(errorMessage);\n      apiError.response = error.response;\n      throw apiError;\n    }\n    \n    throw error;\n  }\n};\n\n/**\n * Accepts a pending connection request\n * @param {string|number} requestId - The ID of the connection request to accept\n * @returns {Promise<Object>} A promise that resolves to the accepted connection data\n */\nexport const acceptConnectionRequest = async (requestId) => {\n  if (!requestId) {\n    throw new Error('Request ID is required to accept a connection');\n  }\n  \n  try {\n    const response = await apiService.post(`/network/connections/${requestId}/accept/`);\n    return response.data;\n  } catch (error) {\n    console.error('Error accepting connection request:', error);\n    \n    if (error.response) {\n      const errorMessage = error.response.data?.detail || \n                         Object.values(error.response.data || {}).flat().join('\\n') ||\n                         'Failed to accept connection request';\n      const apiError = new Error(errorMessage);\n      apiError.response = error.response;\n      throw apiError;\n    }\n    \n    throw error;\n  }\n};\n\n/**\n * Declines a pending connection request\n * @param {string|number} requestId - The ID of the connection request to decline\n * @returns {Promise<Object>} A promise that resolves when the request is declined\n */\nexport const declineConnectionRequest = async (requestId) => {\n  if (!requestId) {\n    throw new Error('Request ID is required to decline a connection');\n  }\n  \n  try {\n    const response = await apiService.post(`/network/connections/${requestId}/decline/`);\n    return response.data;\n  } catch (error) {\n    console.error('Error declining connection request:', error);\n    \n    if (error.response) {\n      const errorMessage = error.response.data?.detail || \n                         Object.values(error.response.data || {}).flat().join('\\n') ||\n                         'Failed to decline connection request';\n      const apiError = new Error(errorMessage);\n      apiError.response = error.response;\n      throw apiError;\n    }\n    \n    throw error;\n  }\n};\n\n/**\n * Removes a connection\n * @param {string|number} connectionId - The ID of the connection to remove\n * @returns {Promise<Object>} A promise that resolves when the connection is removed\n */\nexport const removeConnection = async (connectionId) => {\n  if (!connectionId) {\n    throw new Error('Connection ID is required to remove a connection');\n  }\n  \n  try {\n    const response = await apiService.delete(`/network/connections/${connectionId}/`);\n    return response.data;\n  } catch (error) {\n    console.error('Error removing connection:', error);\n    \n    if (error.response) {\n      const errorMessage = error.response.data?.detail || \n                         Object.values(error.response.data || {}).flat().join('\\n') ||\n                         'Failed to remove connection';\n      const apiError = new Error(errorMessage);\n      apiError.response = error.response;\n      throw apiError;\n    }\n    \n    throw error;\n  }\n};\n\n/**\n * Searches for users to connect with\n * @param {string} query - The search query\n * @param {Object} [params] - Additional query parameters\n * @returns {Promise<Array>} A promise that resolves to an array of user search results\n */\nexport const searchUsers = async (query, params = {}) => {\n  if (!query) {\n    throw new Error('Search query is required');\n  }\n  \n  try {\n    const response = await apiService.get('/network/search/', {\n      params: {\n        q: query,\n        ...params\n      }\n    });\n    \n    return response.data;\n  } catch (error) {\n    console.error('Error searching users:', error);\n    \n    if (error.response) {\n      const errorMessage = error.response.data?.detail || \n                         'Failed to search users';\n      const apiError = new Error(errorMessage);\n      apiError.response = error.response;\n      throw apiError;\n    }\n    \n    throw error;\n  }\n};\n\nexport default {\n  fetchNetworkData,\n  sendConnectionRequest,\n  acceptConnectionRequest,\n  declineConnectionRequest,\n  removeConnection,\n  searchUsers,\n};\n","import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { \n  UserGroupIcon, \n  UserPlusIcon, \n  UserMinusIcon, \n  EnvelopeIcon,\n  CheckIcon,\n  XMarkIcon,\n  MagnifyingGlassIcon\n} from '@heroicons/react/24/outline';\nimport useNetworkStore from '../../stores/networkStore';\nimport LoadingSpinner from '../../components/common/LoadingSpinner';\nimport ErrorMessage from '../../components/common/ErrorMessage';\nimport useAuth from '../../hooks/useAuth';\n\nconst NetworkPage = () => {\n  const navigate = useNavigate();\n  const { currentUser } = useAuth();\n  \n  // Get network data and actions from the store\n  const { \n    connections, \n    pendingRequests, \n    suggestions, \n    searchResults,\n    isLoading, \n    isSearching, \n    error, \n    fetchNetworkData, \n    searchUsers, \n    sendConnectionRequest, \n    acceptConnectionRequest, \n    declineConnectionRequest, \n    removeConnection \n  } = useNetworkStore();\n  \n  // Local state for search query\n  const [searchQuery, setSearchQuery] = useState('');\n  \n  // Fetch network data on component mount\n  useEffect(() => {\n    fetchNetworkData();\n  }, [fetchNetworkData]);\n  \n  // Handle search input change with debounce\n  useEffect(() => {\n    const timerId = setTimeout(() => {\n      if (searchQuery.trim()) {\n        searchUsers(searchQuery);\n      }\n    }, 500);\n    \n    return () => clearTimeout(timerId);\n  }, [searchQuery, searchUsers]);\n  \n  // Handle connection request\n  const handleConnect = async (userId) => {\n    try {\n      await sendConnectionRequest(userId);\n      // The store will update the UI automatically\n    } catch (error) {\n      console.error('Failed to send connection request:', error);\n    }\n  };\n  \n  // Handle accept connection request\n  const handleAcceptRequest = async (requestId) => {\n    try {\n      await acceptConnectionRequest(requestId);\n      // The store will update the UI automatically\n    } catch (error) {\n      console.error('Failed to accept connection request:', error);\n    }\n  };\n  \n  // Handle decline connection request\n  const handleDeclineRequest = async (requestId) => {\n    try {\n      await declineConnectionRequest(requestId);\n      // The store will update the UI automatically\n    } catch (error) {\n      console.error('Failed to decline connection request:', error);\n    }\n  };\n  \n  // Handle remove connection\n  const handleRemoveConnection = async (connectionId) => {\n    if (window.confirm('Are you sure you want to remove this connection?')) {\n      try {\n        await removeConnection(connectionId);\n        // The store will update the UI automatically\n      } catch (error) {\n        console.error('Failed to remove connection:', error);\n      }\n    }\n  };\n  \n  // Render a user card\n  const renderUserCard = (user, type = 'suggestion') => (\n    <div \n      key={user.id} \n      className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-4 flex items-center justify-between hover:shadow-md transition-shadow\"\n    >\n      <div className=\"flex items-center space-x-4\">\n        <div className=\"flex-shrink-0\">\n          <div className=\"h-12 w-12 rounded-full bg-gray-200 dark:bg-gray-700 flex items-center justify-center overflow-hidden\">\n            {user.profile_picture ? (\n              <img \n                src={user.profile_picture} \n                alt={`${user.first_name} ${user.last_name}`}\n                className=\"h-full w-full object-cover\"\n              />\n            ) : (\n              <UserGroupIcon className=\"h-6 w-6 text-gray-400\" />\n            )}\n          </div>\n        </div>\n        <div>\n          <h3 className=\"text-sm font-medium text-gray-900 dark:text-white\">\n            {user.first_name} {user.last_name}\n          </h3>\n          {user.headline && (\n            <p className=\"text-sm text-gray-500 dark:text-gray-400 truncate max-w-xs\">\n              {user.headline}\n            </p>\n          )}\n          {user.mutual_connections > 0 && (\n            <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n              {user.mutual_connections} mutual connection{user.mutual_connections !== 1 ? 's' : ''}\n            </p>\n          )}\n        </div>\n      </div>\n      \n      <div className=\"flex space-x-2\">\n        {type === 'suggestion' && (\n          <button\n            onClick={() => handleConnect(user.id)}\n            className=\"inline-flex items-center px-3 py-1.5 border border-transparent text-xs font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\n          >\n            <UserPlusIcon className=\"h-4 w-4 mr-1\" />\n            Connect\n          </button>\n        )}\n        \n        {type === 'pending' && (\n          <>\n            <button\n              onClick={() => handleAcceptRequest(user.request_id || user.id)}\n              className=\"inline-flex items-center px-2 py-1 border border-transparent text-xs font-medium rounded-md text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500\"\n              title=\"Accept\"\n            >\n              <CheckIcon className=\"h-4 w-4\" />\n            </button>\n            <button\n              onClick={() => handleDeclineRequest(user.request_id || user.id)}\n              className=\"inline-flex items-center px-2 py-1 border border-gray-300 dark:border-gray-600 text-xs font-medium rounded-md text-gray-700 dark:text-gray-200 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\n              title=\"Decline\"\n            >\n              <XMarkIcon className=\"h-4 w-4\" />\n            </button>\n          </>\n        )}\n        \n        {type === 'connection' && (\n          <button\n            onClick={() => handleRemoveConnection(user.connection_id || user.id)}\n            className=\"inline-flex items-center px-3 py-1.5 border border-gray-300 dark:border-gray-600 text-xs font-medium rounded-md text-gray-700 dark:text-gray-200 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\n            title=\"Remove connection\"\n          >\n            <UserMinusIcon className=\"h-4 w-4 mr-1\" />\n            Remove\n          </button>\n        )}\n      </div>\n    </div>\n  );\n  \n  // Render a section with a title and list of users\n  const renderSection = (title, users, type, emptyMessage = 'No items to display') => (\n    <div className=\"mb-8\">\n      <h2 className=\"text-lg font-medium text-gray-900 dark:text-white mb-4\">{title}</h2>\n      {isLoading && users.length === 0 ? (\n        <div className=\"flex justify-center py-8\">\n          <LoadingSpinner size=\"md\" />\n        </div>\n      ) : error && users.length === 0 ? (\n        <ErrorMessage message={error} onRetry={fetchNetworkData} />\n      ) : users.length > 0 ? (\n        <div className=\"grid grid-cols-1 gap-4\">\n          {users.map(user => renderUserCard(user, type))}\n        </div>\n      ) : (\n        <div className=\"text-center py-8 text-gray-500 dark:text-gray-400\">\n          {emptyMessage}\n        </div>\n      )}\n    </div>\n  );\n  \n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-2\">My Network</h1>\n        <p className=\"text-gray-600 dark:text-gray-300\">\n          Manage your connections and grow your professional network\n        </p>\n      </div>\n      \n      {/* Search Bar */}\n      <div className=\"mb-8\">\n        <div className=\"relative\">\n          <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n            <MagnifyingGlassIcon className=\"h-5 w-5 text-gray-400\" />\n          </div>\n          <input\n            type=\"text\"\n            placeholder=\"Search for people to connect with...\"\n            className=\"block w-full pl-10 pr-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md leading-5 bg-white dark:bg-gray-800 placeholder-gray-500 dark:placeholder-gray-400 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n          />\n          {isSearching && (\n            <div className=\"absolute inset-y-0 right-0 pr-3 flex items-center\">\n              <LoadingSpinner size=\"sm\" />\n            </div>\n          )}\n        </div>\n      </div>\n      \n      {/* Search Results */}\n      {searchQuery.trim() && (\n        <div className=\"mb-8\">\n          <h2 className=\"text-lg font-medium text-gray-900 dark:text-white mb-4\">\n            Search Results for \"{searchQuery}\"\n          </h2>\n          {isSearching && searchResults.length === 0 ? (\n            <div className=\"flex justify-center py-8\">\n              <LoadingSpinner size=\"md\" />\n            </div>\n          ) : searchResults.length > 0 ? (\n            <div className=\"grid grid-cols-1 gap-4\">\n              {searchResults.map(user => renderUserCard(user, 'suggestion'))}\n            </div>\n          ) : searchQuery.trim() ? (\n            <div className=\"text-center py-8 text-gray-500 dark:text-gray-400\">\n              No users found matching \"{searchQuery}\"\n            </div>\n          ) : null}\n        </div>\n      )}\n      \n      {/* Pending Connection Requests */}\n      {!searchQuery.trim() && renderSection(\n        'Connection Requests',\n        pendingRequests,\n        'pending',\n        'You have no pending connection requests.'\n      )}\n      \n      {/* People You May Know */}\n      {!searchQuery.trim() && renderSection(\n        'People You May Know',\n        suggestions,\n        'suggestion',\n        'No suggestions available at the moment.'\n      )}\n      \n      {/* Your Connections */}\n      {!searchQuery.trim() && renderSection(\n        'Your Connections',\n        connections,\n        'connection',\n        'You have not connected with anyone yet.'\n      )}\n    </div>\n  );\n};\n\nexport default NetworkPage;\n"],"names":["UserMinusIcon","title","titleId","props","svgRef","React.createElement","Object","assign","xmlns","fill","viewBox","strokeWidth","stroke","ref","id","strokeLinecap","strokeLinejoin","d","ForwardRef","React.forwardRef","useNetworkStore","create","set","get","connections","pendingRequests","suggestions","searchResults","isLoading","isSearching","error","pagination","count","next","previous","totalPages","currentPage","totalCount","fetchNetworkData","async","filters","response","params","page","pageSize","page_size","queryParams","keys","forEach","key","apiService","_fullResponse","data","headers","status","console","errorMessage","_a","detail","_b","message","customError","Error","request","paginationData","JSON","parse","total_pages","current_page","parsePagination","pending_requests","length","Math","ceil","parseInt","searchUsers","query","results","q","apiError","sendConnectionRequest","userId","result","post","user_id","values","flat","join","state","filter","user","acceptConnectionRequest","requestId","req","declineConnectionRequest","removeConnection","connectionId","delete","conn","clear","NetworkPage","useNavigate","useAuth","searchQuery","setSearchQuery","useState","useEffect","timerId","setTimeout","trim","clearTimeout","renderUserCard","type","jsxs","className","children","jsx","profile_picture","src","alt","first_name","last_name","UserGroupIcon","headline","mutual_connections","onClick","handleConnect","UserPlusIcon","Fragment","handleAcceptRequest","request_id","CheckIcon","handleDeclineRequest","XMarkIcon","window","confirm","handleRemoveConnection","connection_id","renderSection","users","emptyMessage","LoadingSpinner","size","ErrorMessage","onRetry","map","MagnifyingGlassIcon","placeholder","value","onChange","e","target"],"mappings":"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","x_google_ignoreList":[0]}