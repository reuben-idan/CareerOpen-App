{"version":3,"file":"jobService-BkGZEzDV.js","sources":["../../src/services/authService.js","../../src/services/jobService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://127.0.0.1:8000/api';\r\n\r\n// Create axios instance with base URL and default headers\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Add a request interceptor to include the auth token in requests\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('accessToken');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Add a response interceptor to handle token refresh\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  async (error) => {\r\n    const originalRequest = error.config;\r\n\r\n    // If error is 401 and we haven't tried to refresh yet\r\n    if (error.response?.status === 401 && !originalRequest._retry) {\r\n      originalRequest._retry = true;\r\n      \r\n      try {\r\n        const refreshToken = localStorage.getItem('refreshToken');\r\n        if (!refreshToken) {\r\n          // No refresh token, redirect to login\r\n          window.location.href = '/login';\r\n          return Promise.reject(error);\r\n        }\r\n\r\n        // Try to refresh the token\r\n        const response = await axios.post(`${API_URL}/token/refresh/`, {\r\n          refresh: refreshToken,\r\n        });\r\n\r\n        const { access, refresh } = response.data;\r\n        \r\n        // Update tokens in storage\r\n        localStorage.setItem('accessToken', access);\r\n        if (refresh) {\r\n          localStorage.setItem('refreshToken', refresh);\r\n        }\r\n\r\n        // Update the auth header\r\n        originalRequest.headers.Authorization = `Bearer ${access}`;\r\n        \r\n        // Retry the original request\r\n        return api(originalRequest);\r\n      } catch (error) {\r\n        // If refresh fails, clear storage and redirect to login\r\n        localStorage.removeItem('accessToken');\r\n        localStorage.removeItem('refreshToken');\r\n        window.location.href = '/login';\r\n        return Promise.reject(error);\r\n      }\r\n    }\r\n    \r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Auth service methods\r\nexport const authService = {\r\n  // Register a new user\r\n  register: async (userData) => {\r\n    try {\r\n      const response = await api.post('/auth/register/', userData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n\r\n  // Login user\r\n  login: async (email, password) => {\r\n    try {\r\n      const response = await api.post('/auth/login/', { email, password });\r\n      const { access, refresh, user } = response.data;\r\n      \r\n      // Store tokens in localStorage\r\n      localStorage.setItem('accessToken', access);\r\n      localStorage.setItem('refreshToken', refresh);\r\n      \r\n      // Store user data in localStorage\r\n      if (user) {\r\n        localStorage.setItem('user', JSON.stringify(user));\r\n      }\r\n      \r\n      // Set default auth header\r\n      api.defaults.headers.common['Authorization'] = `Bearer ${access}`;\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n\r\n  // Logout user\r\n  logout: () => {\r\n    // Remove tokens from storage\r\n    localStorage.removeItem('accessToken');\r\n    localStorage.removeItem('refreshToken');\r\n    \r\n    // Remove auth header\r\n    delete api.defaults.headers.common['Authorization'];\r\n    \r\n    // Redirect to login\r\n    window.location.href = '/login';\r\n  },\r\n\r\n  // Get current user profile\r\n  getCurrentUser: async () => {\r\n    try {\r\n      const response = await api.get('/auth/me/');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n\r\n  // Check if user is authenticated\r\n  isAuthenticated: () => {\r\n    return !!localStorage.getItem('accessToken');\r\n  },\r\n\r\n  // Get auth header\r\n  getAuthHeader: () => {\r\n    const token = localStorage.getItem('accessToken');\r\n    return token ? { Authorization: `Bearer ${token}` } : {};\r\n  },\r\n  // Export the API instance\r\n  api\r\n};\r\n\r\n// Export the auth service as default\r\nexport default authService;\r\n","import authService from './authService';\r\nconst { api } = authService;\r\n\r\nconst jobService = {\r\n  // Get all jobs with optional filters\r\n  getJobs: async (filters = {}) => {\r\n    try {\r\n      const response = await api.get('/jobs/', { params: filters });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n\r\n  // Get a single job by ID\r\n  getJobById: async (jobId) => {\r\n    try {\r\n      const response = await api.get(`/jobs/${jobId}/`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n\r\n  // Create a new job\r\n  createJob: async (jobData) => {\r\n    try {\r\n      const response = await api.post('/jobs/', jobData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n\r\n  // Update a job\r\n  updateJob: async (jobId, jobData) => {\r\n    try {\r\n      const response = await api.put(`/jobs/${jobId}/`, jobData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n\r\n  // Delete a job\r\n  deleteJob: async (jobId) => {\r\n    try {\r\n      await api.delete(`/jobs/${jobId}/`);\r\n      return true;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n\r\n  // Search jobs\r\n  searchJobs: async (query, filters = {}) => {\r\n    try {\r\n      const response = await api.get('/jobs/search/', {\r\n        params: { search: query, ...filters },\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n\r\n  // Apply for a job\r\n  applyForJob: async (jobId, applicationData) => {\r\n    try {\r\n      const response = await api.post(`/jobs/${jobId}/apply/`, applicationData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n\r\n  // Get user's job applications\r\n  getUserApplications: async () => {\r\n    try {\r\n      const response = await api.get('/jobs/applications/');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n\r\n  // Get application details\r\n  getApplicationDetails: async (applicationId) => {\r\n    try {\r\n      const response = await api.get(`/jobs/applications/${applicationId}/`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n\r\n  // Save/unsave a job\r\n  toggleSaveJob: async (jobId) => {\r\n    try {\r\n      const response = await api.post(`/jobs/${jobId}/save/`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n\r\n  // Get saved jobs\r\n  getSavedJobs: async () => {\r\n    try {\r\n      const response = await api.get('/jobs/saved/');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n};\r\n\r\nexport default jobService;\r\n"],"names":["API_URL","api","axios","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","async","originalRequest","_a","status","_retry","refreshToken","window","location","href","post","refresh","access","data","setItem","removeItem","authService","jobService","getJobs","filters","get","params","message","getJobById","jobId","createJob","jobData","updateJob","put","deleteJob","delete","searchJobs","query","search","applyForJob","applicationData","getUserApplications","getApplicationDetails","applicationId","toggleSaveJob","getSavedJobs"],"mappings":"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"}